pipeline {
    agent any

    tools {
        maven 'maven-lts' // Make sure this matches your Maven installation name in Jenkins
        // jdk 'jdk' // Uncomment only if a JDK is configured with this name in Global Tools
    }

    environment {
        IMAGE_NAME = ''
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Increment Version') {
            steps {
                script {
                    echo 'Incrementing application version...'
                    sh '''
                        mvn build-helper:parse-version versions:set \
                            -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion} \
                            versions:commit
                    '''

                    def pom = readFile('pom.xml')
                    def matcher = pom =~ '<version>(.+)</version>'
                    def version = matcher ? matcher[0][1] : 'latest'

                    env.IMAGE_NAME = "${version}-${env.BUILD_NUMBER}"
                    echo "New version set: ${env.IMAGE_NAME}"
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    echo 'Building the application...'
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image...'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh """
                            docker build -t siresol1/my-repos:${IMAGE_NAME} .
                            echo \$PASS | docker login -u \$USER --password-stdin
                            docker push siresol1/my-repos:${IMAGE_NAME}
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo 'Deploying Docker image to EC2...'
                    // Add deployment logic (e.g., SSH, ECS, Ansible, etc.)
                }
            }
        }

        stage('Commit Version Update') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh '''
                            git config --global user.email "jenkins@example.com"
                            git config --global user.name "jenkins"
                            git remote set-url origin https://${USER}:${PASS}@github.com/sirsol1/java-maven-app.git
                            git add .
                            git commit -m "ci: version bump" || echo "No changes to commit"
                            git push origin HEAD:jenkins-jobs
                        '''
                    }
                }
            }
        }
    }
}
