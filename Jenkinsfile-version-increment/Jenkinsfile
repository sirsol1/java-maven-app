pipeline {
    agent any

    environment {
        IMAGE_NAME = ""
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Install Tools') {
            tools {
                maven 'maven'
                jdk 'jdk'
            }
        }

        stage('Increment Version') {
            steps {
                script {
                    echo "incrementing app version..."
                    sh 'mvn build-helper:parse-version versions:set -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion} versions:commit'

                    def version = readFile('pom.xml')
                        .readLines()
                        .find { it.trim().startsWith('<version>') }
                        .replaceAll('<\\/?.*?>', '')
                        .trim()

                    def buildNumber = env.BUILD_NUMBER
                    env.IMAGE_NAME = "${version}-${buildNumber}"
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    echo "building the application..."
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "building the docker image..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh "docker build -t siresol1/my-repos:${IMAGE_NAME} ."
                        sh "echo $PASS | docker login -u $USER --password-stdin"
                        sh "docker push siresol1/my-repos:${IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "deploying docker image to EC2..."
                    // Add your deployment script or SSH commands here if needed
                }
            }
        }

        stage('Commit Version Update') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh 'git config --global user.email "jenkins@example.com"'
                        sh 'git config --global user.name "jenkins"'
                        sh "git remote set-url origin https://${USER}:${PASS}@github.com/sirsol1/java-maven-app.git"
                        sh 'git add .'
                        sh 'git commit -m "ci: version bump" || echo "No changes to commit"'
                        sh 'git push origin HEAD:jenkins-jobs'
                    }
                }
            }
        }
    }
}
